#Наибольший общий делитель
#В модуле math есть функция math.gcd(a, b), возвращающая наибольший общий делитель (НОД) двух чисел. 
# Вычислите и напечатайте наибольший общий делитель для списка натуральных чисел. Ввод чисел продолжается до ввода пустой строки.
#Входные данные
#36
#12
#144
#18
#Выходные данные
#6

#def gcd_fun(a, b): 
#    if(b == 0): # it divide every number 
#        return a  # return x 
#    else: 
#        return gcd_fun(b, a % b)
#a =int(input("Enter the first number: ")) # take first no.  
#b =int(input("Enter the second number: ")) # take second no.  
#num = gcd_fun(a, b) # call the gcd_fun() to find the result 
#print("GCD of two number is: ") 
#print(num) # call num 

#Орел и решка
#Дана строка текста, состоящая из букв русского алфавита "О" и "Р". Буква "О" – соответствует выпадению Орла, 
# а буква "Р" – соответствует выпадению Решки. 
# Напишите программу, которая подсчитывает наибольшее количество подряд выпавших Решек.
#Формат входных данных:
#На вход программе подается строка текста, состоящая из букв русского алфавита "О" и "Р".

#Формат выходных данных:
#Программа должна вывести наибольшее количество подряд выпавших Решек.

#Примечание. Если выпавших Решек нет, то необходимо вывести число 0.
#Входные данные Выходные данные
#ОРРОРОРООРРРО 3
#ООООООРРРОРОРРРРРРР
#7
#ООООРРРРОРОРРРРРРРРООРОРОРРРРРРРРРРРРРРРРРРРРРРРРРРРРРРР
#31

#line = 'ООООООРРРОРОРРРРРРР'
#result = []
#while True:
#    if 'о' in line:
#        start = line.index('о')
#    else:
#        break
#    if 'р' in line[start:]:
#        end = line.index('р', start)
#        result.append(line[start:end])
#    else:
#        result.append(line[start:])
#        break
#    line = line[end + 1:]
 
#print(len(max(line.split('р'),key = len)))

#Задача 
# Измените код одной-двух решенных ранее задач (с прошлых семинаров или домашних работ), 
# применив лямбды, filter, map, zip, enumerate, списочные выражения.

#def double(x):
#    return x*2
  
#my_list = [1, 2, 3, 4, 5, 6]
#new_list = list(map(double, my_list))
#print(new_list) # [2, 4, 6, 8, 10, 12]